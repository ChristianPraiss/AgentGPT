{
  "folderName": "server",
  "folderPath": ".autodoc/docs/json/src/server",
  "url": "/.autodoc/docs/json/src/server",
  "files": [
    {
      "fileName": "auth.ts",
      "filePath": "src/server/auth.ts",
      "url": "/src/server/auth.ts",
      "summary": "This code is part of the agentgpt project and is responsible for handling authentication using NextAuth.js. It imports several modules from NextAuth.js, including `getServerSession`, `NextAuthOptions`, and `DefaultSession`. It also imports several providers for authentication, including `GithubProvider`, `GoogleProvider`, and `DiscordProvider`. \n\nThe `authOptions` object is used to configure NextAuth.js. It includes several properties, such as `callbacks`, `adapter`, `providers`, and `theme`. The `callbacks` property is an object that defines functions to be called during the authentication process. In this case, the `session` function is used to add custom properties to the `session` object. The `adapter` property is used to specify the database adapter to be used by NextAuth.js. In this case, the `PrismaAdapter` is used with the `prisma` instance. The `providers` property is an array of authentication providers to be used by NextAuth.js. In this case, the `providers` array includes `GithubProvider`, `GoogleProvider`, and `DiscordProvider`. The `theme` property is used to specify the theme for the authentication pages.\n\nThe `getServerAuthSession` function is a wrapper for `getServerSession` that takes a `ctx` object as an argument and returns a `Promise` that resolves to a `Session` object. This function is used to get the user's session on the server-side.\n\nThe `declare module` block is a module augmentation for `next-auth` types that allows custom properties to be added to the `session` and `user` objects. This is used to add a `role` property to the `User` object and a `subscriptionId` property to the `user` object.\n\nOverall, this code is responsible for configuring and handling authentication using NextAuth.js in the agentgpt project. It provides a wrapper function for getting the user's session on the server-side and defines the authentication options to be used by NextAuth.js.",
      "questions": "1. What is the purpose of this code file?\n- This code file is responsible for configuring authentication options for the agentgpt project using NextAuth.js.\n\n2. What providers are being used for authentication?\n- GoogleProvider, GithubProvider, and DiscordProvider are being used for authentication.\n\n3. What is the purpose of the `getServerAuthSession` function?\n- The `getServerAuthSession` function is a wrapper for `getServerSession` that allows for authentication session retrieval without needing to import `authOptions` in every file."
    },
    {
      "fileName": "db.ts",
      "filePath": "src/server/db.ts",
      "url": "/src/server/db.ts",
      "summary": "This code imports the `PrismaClient` class from the `@prisma/client` package and the `env` object from a `server.mjs` file located in the `env` directory. It then defines a `globalForPrisma` variable that casts the global `this` object to an unknown type and then to an object with a `prisma` property of type `PrismaClient`. \n\nThe `prisma` constant is then defined as either the existing `prisma` object or a new instance of `PrismaClient` with a `log` property that is an array of log levels based on the `NODE_ENV` environment variable. If `NODE_ENV` is set to `\"development\"`, the log levels are set to `[\"query\", \"error\", \"warn\"]`, otherwise they are set to `[\"error\"]`. \n\nFinally, if `NODE_ENV` is not set to `\"production\"`, the `prisma` object is assigned to the `prisma` property of the `globalForPrisma` object. \n\nThis code is likely used to create and manage a connection to a Prisma database in the larger project. The `PrismaClient` class is a type-safe database client that can be used to perform CRUD operations on a database. By defining the `prisma` constant as a global object, it can be accessed and used throughout the project without having to create a new instance of `PrismaClient` each time. \n\nExample usage of this code might include querying a database for a list of users:\n\n```\nimport { prisma } from \"./path/to/agentgpt\";\n\nasync function getUsers() {\n  const users = await prisma.user.findMany();\n  return users;\n}\n```",
      "questions": "1. What is the purpose of the `PrismaClient` import and how is it being used in this code?\n   - The `PrismaClient` import is used to interact with a database. It is being instantiated as `prisma` and exported for use in other parts of the project.\n\n2. What is the `env` import and how is it being used in this code?\n   - The `env` import is used to access environment variables. In this code, it is being used to determine whether the `log` property of the `PrismaClient` should include query, error, and warn logs or just error logs.\n\n3. Why is `globalForPrisma` being used and what is its purpose?\n   - `globalForPrisma` is being used to access the `prisma` instance globally. Its purpose is to ensure that there is only one instance of `PrismaClient` being used throughout the project, even if this module is imported multiple times."
    }
  ],
  "folders": [
    {
      "folderName": "api",
      "folderPath": ".autodoc/docs/json/src/server/api",
      "url": "/.autodoc/docs/json/src/server/api",
      "files": [
        {
          "fileName": "root.ts",
          "filePath": "src/server/api/root.ts",
          "url": "/src/server/api/root.ts",
          "summary": "This code defines the primary router for a server in the agentgpt project. The router is created using the `createTRPCRouter` function from the `trpc` module. The router is then populated with three additional routers: `exampleRouter`, `agentRouter`, and `accountRouter`. These routers are defined in separate files located in the `routers` directory of the project.\n\nThe purpose of this code is to create a unified API for the server that can handle requests related to examples, agents, and accounts. By combining the functionality of these separate routers into a single router, the server can provide a more streamlined and organized API for clients to interact with.\n\nThe `appRouter` object is exported from this file, which can be used by other parts of the project to handle incoming requests. Additionally, the `AppRouter` type is exported, which is a type definition of the `appRouter` object. This can be used by other parts of the project to ensure that they are using the correct type when interacting with the router.\n\nHere is an example of how this code might be used in the larger project:\n\n```typescript\nimport { AppRouter } from \"./appRouter\";\n\n// create an instance of the app router\nconst router: AppRouter = new AppRouter();\n\n// handle incoming requests\nrouter.handleRequest(req, res);\n```\n\nOverall, this code plays an important role in defining the API for the agentgpt project and ensuring that requests related to examples, agents, and accounts are handled in a consistent and organized manner.",
          "questions": "1. What is the purpose of the `createTRPCRouter` function and where is it defined?\n- The `createTRPCRouter` function is used to create the primary router for the server and it is defined in the `trpc` module.\n2. What are the `exampleRouter`, `agentRouter`, and `accountRouter` used for?\n- They are routers that are added to the primary `appRouter` and are used to handle requests related to examples, agents, and accounts respectively.\n3. What is the purpose of the `AppRouter` type definition?\n- It exports the type definition of the `appRouter` object, which can be used to ensure type safety when using the router in other parts of the codebase."
        },
        {
          "fileName": "trpc.ts",
          "filePath": "src/server/api/trpc.ts",
          "url": "/src/server/api/trpc.ts",
          "summary": "This file sets up the tRPC server for the agentgpt project. It defines the contexts available in the backend API, initializes the tRPC API, and creates routers and procedures that can be used to build the API.\n\nThe first section of the code defines the \"contexts\" that are available in the backend API. These contexts allow access to things like the database and session when processing a request. The `createInnerTRPCContext` helper generates the \"internals\" for a tRPC context, which can be used for testing or when we don't have access to req/res. The `createTRPCContext` function is the actual context used in the router and is used to process every request that goes through the tRPC endpoint.\n\nThe second section initializes the tRPC API, connecting the context and transformer. The `initTRPC` function initializes the tRPC server, and the `superjson` transformer is used to serialize and deserialize data.\n\nThe third section defines the router and procedures that can be used to build the tRPC API. The `createTRPCRouter` function is used to create new routers and subrouters in the tRPC API. The `publicProcedure` is the base piece used to build new queries and mutations on the tRPC API. It does not guarantee that a user querying is authorized, but you can still access user session data if they are logged in. The `enforceUserIsAuthed` middleware is a reusable middleware that enforces users are logged in before running the procedure. The `protectedProcedure` is used for queries or mutations that are only accessible to logged-in users. It verifies the session is valid and guarantees `ctx.session.user` is not null.\n\nOverall, this file sets up the tRPC server for the agentgpt project and provides the necessary pieces to build the tRPC API. Developers can use the defined contexts, routers, and procedures to build queries and mutations for the API.",
          "questions": "1. What is the purpose of the `createInnerTRPCContext` function?\n   \n   The `createInnerTRPCContext` function generates the \"internals\" for a tRPC context, which can be used for testing or in situations where req/res are not available.\n\n2. What is the difference between `publicProcedure` and `protectedProcedure`?\n   \n   `publicProcedure` is a base piece used to build new queries and mutations on the tRPC API, while `protectedProcedure` is only accessible to logged-in users and verifies that the session is valid.\n\n3. What is the purpose of the `enforceUserIsAuthed` middleware?\n   \n   The `enforceUserIsAuthed` middleware enforces that users are logged in before running a procedure, and throws a `TRPCError` with code \"UNAUTHORIZED\" if the user is not logged in."
        }
      ],
      "folders": [
        {
          "folderName": "routers",
          "folderPath": ".autodoc/docs/json/src/server/api/routers",
          "url": "/.autodoc/docs/json/src/server/api/routers",
          "files": [
            {
              "fileName": "account.ts",
              "filePath": "src/server/api/routers/account.ts",
              "url": "/src/server/api/routers/account.ts",
              "summary": "This code defines a router for handling account-related operations in the agentgpt project. The router is created using the `createTRPCRouter` function from the `trpc` module. The router has two endpoints, `subscribe` and `manage`, both of which are protected procedures that require authentication.\n\nThe `subscribe` endpoint creates a new Stripe checkout session for the user to subscribe to a plan. It first retrieves the user's information from the database using the `prisma` module. It then creates a new checkout session using the Stripe API, with the success and cancel URLs set to the `NEXTAUTH_URL` environment variable. The session is set to subscription mode and includes a single line item with the price ID set to the `STRIPE_SUBSCRIPTION_PRICE_ID` environment variable. The customer ID and email are set to the user's Stripe customer ID and email, respectively, if available. The client reference ID and metadata are also set to the user's ID.\n\nThe `manage` endpoint creates a new Stripe billing portal session for the user to manage their subscription. It first retrieves the user's subscription ID from the session. It then retrieves the subscription information from the Stripe API and creates a new billing portal session using the customer ID associated with the subscription. The return URL is set to the `NEXTAUTH_URL` environment variable.\n\nOverall, this code provides a way for users to manage their subscriptions in the agentgpt project using the Stripe API. The `accountRouter` can be used in conjunction with other routers and modules to provide a complete user account system. For example, the `prisma` module can be used to store user information in a database, and the `utils/stripe-utils` module can be used to retrieve and update Stripe customer information.",
              "questions": "1. What is the purpose of the `createTRPCRouter` function and how is it used in this code?\n- `createTRPCRouter` is a function that creates a router for handling TRPC requests. In this code, it is used to create the `accountRouter` object which has two methods: `subscribe` and `manage`.\n\n2. What is the purpose of the `Stripe` library and how is it used in this code?\n- `Stripe` is a library for interacting with the Stripe API. In this code, it is used to create a new `stripe` object with the `env.STRIPE_SECRET_KEY` key and version `2022-11-15`. It is also used to create a new checkout session and retrieve a subscription.\n\n3. What is the purpose of the `protectedProcedure` function and how is it used in this code?\n- `protectedProcedure` is a function that wraps a TRPC procedure and adds authentication and authorization checks. In this code, it is used to wrap the `subscribe` and `manage` methods of the `accountRouter` object to ensure that only authenticated users can access them."
            },
            {
              "fileName": "agentRouter.ts",
              "filePath": "src/server/api/routers/agentRouter.ts",
              "url": "/src/server/api/routers/agentRouter.ts",
              "summary": "This code defines a router for managing agents in the larger project. The `agentRouter` object has four methods: `create`, `getAll`, `findById`, and `deleteById`. \n\nThe `create` method is a protected mutation that takes an input object with `name`, `goal`, and `tasks` properties. The `name` and `goal` properties are strings, while the `tasks` property is an array of objects that conform to the `messageParser` schema. The method creates a new agent in the database using the `prisma` ORM, with the `name`, `goal`, and `userId` properties taken from the input object and the `id` property generated automatically. It then creates a new `agentTask` object in the database for each task in the `tasks` array, with the `agentId`, `type`, `info`, `value`, and `sort` properties taken from the corresponding task object in the input array. Finally, it returns the newly created agent object.\n\nThe `getAll` method is a protected query that returns an array of up to 20 agents from the database that belong to the current user and have not been deleted. The agents are sorted by `createDate` in descending order.\n\nThe `findById` method is a public query that takes an `id` string as input and returns the agent object with the corresponding `id` from the database, along with an array of associated `agentTask` objects. The `agentTask` objects are sorted by `sort` in ascending order.\n\nThe `deleteById` method is a protected mutation that takes an `id` string as input and marks the corresponding agent object in the database as deleted by setting its `deleteDate` property to the current date.\n\nOverall, this code provides a set of CRUD operations for managing agents in the larger project. It uses the `zod` library for input validation and the `prisma` ORM for database access. The `agentRouter` object can be used by other parts of the project to create, read, update, and delete agents and their associated tasks. For example, the `create` method could be used by a user interface to create a new agent with a name, goal, and list of tasks, while the `getAll` method could be used to display a list of agents belonging to the current user.",
              "questions": "1. What is the purpose of the `agentRouter` object?\n- The `agentRouter` object is a TRPC router that defines four procedures: `create`, `getAll`, `findById`, and `deleteById`, which respectively create a new agent, get all agents, get an agent by ID, and delete an agent by ID.\n\n2. What is the `saveAgentParser` object used for?\n- The `saveAgentParser` object is used to validate the input data for creating a new agent. It expects an object with `name`, `goal`, and `tasks` properties, where `name` and `goal` are strings and `tasks` is an array of objects that match the `messageParser` schema.\n\n3. What is the purpose of the `messageParser` schema?\n- The `messageParser` schema is used to validate the `tasks` property of the input data for creating a new agent. It expects an object with `type`, `info`, and `value` properties, where `type` is a string and `info` and `value` are optional strings."
            },
            {
              "fileName": "example.ts",
              "filePath": "src/server/api/routers/example.ts",
              "url": "/src/server/api/routers/example.ts",
              "summary": "The code above defines a router for the agentgpt project using the trpc library. The router is named `exampleRouter` and contains two procedures: `hello` and `getSecretMessage`.\n\nThe `hello` procedure is a public procedure that takes an input object with a single property `text` of type string. It returns an object with a single property `greeting` that concatenates the input `text` with the string \"Hello\". This procedure can be used to greet a user with a personalized message.\n\nHere is an example of how to use the `hello` procedure:\n\n```javascript\nconst response = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(response.greeting); // \"Hello world\"\n```\n\nThe `getSecretMessage` procedure is a protected procedure that does not take any input. It returns a string that can only be accessed by authenticated users. This procedure can be used to retrieve sensitive information that should not be accessible to the general public.\n\nHere is an example of how to use the `getSecretMessage` procedure:\n\n```javascript\nconst response = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(response); // \"you can now see this secret message!\"\n```\n\nOverall, this code defines a router that can be used to handle incoming requests and provide responses based on the defined procedures. The `hello` procedure can be used to greet users with personalized messages, while the `getSecretMessage` procedure can be used to retrieve sensitive information that requires authentication.",
              "questions": "1. What is the purpose of the `zod` library being imported?\n- The `zod` library is being used for input validation and type checking.\n\n2. What is the difference between `publicProcedure` and `protectedProcedure`?\n- `publicProcedure` is accessible to anyone, while `protectedProcedure` requires authentication to access.\n\n3. What is the expected output of the `hello` procedure?\n- The `hello` procedure expects an input object with a `text` property of type string, and returns an object with a `greeting` property that concatenates the input `text` with the string \"Hello\"."
            }
          ],
          "folders": [],
          "summary": "The `.autodoc/docs/json/src/server/api/routers` folder contains routers for handling various operations in the agentgpt project. These routers are created using the `trpc` module and can be used in conjunction with other parts of the project to provide a complete system.\n\n### account.ts\n\nThe `account.ts` file defines a router for handling account-related operations. It has two endpoints, `subscribe` and `manage`, both of which require authentication.\n\n- `subscribe`: Creates a new Stripe checkout session for the user to subscribe to a plan. It retrieves the user's information from the database using the `prisma` module and creates a new checkout session using the Stripe API.\n- `manage`: Creates a new Stripe billing portal session for the user to manage their subscription. It retrieves the user's subscription ID from the session and creates a new billing portal session using the customer ID associated with the subscription.\n\nExample usage:\n\n```javascript\nconst subscribeResponse = await accountRouter.mutation(\"subscribe\", { planId: \"your_plan_id\" });\nconst manageResponse = await accountRouter.mutation(\"manage\", { subscriptionId: \"your_subscription_id\" });\n```\n\n### agentRouter.ts\n\nThe `agentRouter.ts` file defines a router for managing agents. It has four methods: `create`, `getAll`, `findById`, and `deleteById`.\n\n- `create`: Creates a new agent in the database with the given `name`, `goal`, and `tasks`. It also creates associated `agentTask` objects in the database.\n- `getAll`: Returns an array of up to 20 agents belonging to the current user and not deleted, sorted by `createDate` in descending order.\n- `findById`: Returns the agent object with the corresponding `id` from the database, along with an array of associated `agentTask` objects.\n- `deleteById`: Marks the corresponding agent object in the database as deleted by setting its `deleteDate` property to the current date.\n\nExample usage:\n\n```javascript\nconst createResponse = await agentRouter.mutation(\"create\", { name: \"Agent 1\", goal: \"Goal 1\", tasks: [...] });\nconst allAgents = await agentRouter.query(\"getAll\");\nconst agent = await agentRouter.query(\"findById\", { id: \"your_agent_id\" });\nconst deleteResponse = await agentRouter.mutation(\"deleteById\", { id: \"your_agent_id\" });\n```\n\n### example.ts\n\nThe `example.ts` file defines a router named `exampleRouter` with two procedures: `hello` and `getSecretMessage`.\n\n- `hello`: A public procedure that takes an input object with a single property `text` of type string and returns an object with a single property `greeting` that concatenates the input `text` with the string \"Hello\".\n- `getSecretMessage`: A protected procedure that returns a string that can only be accessed by authenticated users.\n\nExample usage:\n\n```javascript\nconst helloResponse = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(helloResponse.greeting); // \"Hello world\"\n\nconst secretMessage = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(secretMessage); // \"you can now see this secret message!\"\n```\n\nThese routers provide a way to handle various operations in the agentgpt project, such as managing user accounts, agents, and tasks. They can be used with other modules, like `prisma` for database access and `utils/stripe-utils` for Stripe customer management.",
          "questions": ""
        }
      ],
      "summary": "The `.autodoc/docs/json/src/server/api` folder contains the primary router and tRPC server setup for the agentgpt project. It plays a crucial role in defining the API and handling requests related to examples, agents, and accounts in a consistent and organized manner.\n\nThe `root.ts` file defines the primary router for the server, which is created using the `createTRPCRouter` function from the `trpc` module. The router is populated with three additional routers: `exampleRouter`, `agentRouter`, and `accountRouter`. These routers are defined in separate files located in the `routers` directory. The `appRouter` object and `AppRouter` type are exported for use in other parts of the project.\n\nExample usage:\n\n```typescript\nimport { AppRouter } from \"./appRouter\";\n\n// create an instance of the app router\nconst router: AppRouter = new AppRouter();\n\n// handle incoming requests\nrouter.handleRequest(req, res);\n```\n\nThe `trpc.ts` file sets up the tRPC server, defining contexts, initializing the API, and creating routers and procedures for building the API. The contexts provide access to the database and session, while the `createTRPCRouter` function and `publicProcedure`, `enforceUserIsAuthed`, and `protectedProcedure` methods help build the tRPC API.\n\nThe `routers` subfolder contains routers for handling various operations, such as managing user accounts, agents, and tasks. The `account.ts` file defines a router for account-related operations, with `subscribe` and `manage` endpoints. The `agentRouter.ts` file defines a router for managing agents, with `create`, `getAll`, `findById`, and `deleteById` methods. The `example.ts` file defines a router named `exampleRouter` with two procedures: `hello` and `getSecretMessage`.\n\nExample usage:\n\n```javascript\n// Account router\nconst subscribeResponse = await accountRouter.mutation(\"subscribe\", { planId: \"your_plan_id\" });\nconst manageResponse = await accountRouter.mutation(\"manage\", { subscriptionId: \"your_subscription_id\" });\n\n// Agent router\nconst createResponse = await agentRouter.mutation(\"create\", { name: \"Agent 1\", goal: \"Goal 1\", tasks: [...] });\nconst allAgents = await agentRouter.query(\"getAll\");\nconst agent = await agentRouter.query(\"findById\", { id: \"your_agent_id\" });\nconst deleteResponse = await agentRouter.mutation(\"deleteById\", { id: \"your_agent_id\" });\n\n// Example router\nconst helloResponse = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(helloResponse.greeting); // \"Hello world\"\nconst secretMessage = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(secretMessage); // \"you can now see this secret message!\"\n```\n\nThese routers work with other modules, like `prisma` for database access and `utils/stripe-utils` for Stripe customer management, to provide a complete system for the agentgpt project.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/src/server` folder contains essential code for handling authentication, database connections, and API routing in the agentgpt project. It uses NextAuth.js for authentication, Prisma for database access, and tRPC for API routing.\n\n`auth.ts` configures NextAuth.js with authentication providers like Github, Google, and Discord. It also sets up a `PrismaAdapter` for database access and customizes the session object. The `getServerAuthSession` function is a wrapper for getting the user's session on the server-side. Example usage:\n\n```javascript\nimport { getServerAuthSession } from \"./auth\";\n\nasync function getSession(ctx) {\n  const session = await getServerAuthSession(ctx);\n  return session;\n}\n```\n\n`db.ts` sets up a global `prisma` object, an instance of `PrismaClient`, for database access throughout the project. Example usage:\n\n```javascript\nimport { prisma } from \"./db\";\n\nasync function getUsers() {\n  const users = await prisma.user.findMany();\n  return users;\n}\n```\n\nThe `api` subfolder contains the primary router and tRPC server setup. The `root.ts` file defines the primary router, which includes `exampleRouter`, `agentRouter`, and `accountRouter`. The `trpc.ts` file sets up the tRPC server, defining contexts and initializing the API.\n\nThe `routers` subfolder contains routers for handling various operations. The `account.ts` file defines a router for account-related operations, with `subscribe` and `manage` endpoints. The `agentRouter.ts` file defines a router for managing agents, with `create`, `getAll`, `findById`, and `deleteById` methods. The `example.ts` file defines a router named `exampleRouter` with two procedures: `hello` and `getSecretMessage`. Example usage:\n\n```javascript\n// Account router\nconst subscribeResponse = await accountRouter.mutation(\"subscribe\", { planId: \"your_plan_id\" });\nconst manageResponse = await accountRouter.mutation(\"manage\", { subscriptionId: \"your_subscription_id\" });\n\n// Agent router\nconst createResponse = await agentRouter.mutation(\"create\", { name: \"Agent 1\", goal: \"Goal 1\", tasks: [...] });\nconst allAgents = await agentRouter.query(\"getAll\");\nconst agent = await agentRouter.query(\"findById\", { id: \"your_agent_id\" });\nconst deleteResponse = await agentRouter.mutation(\"deleteById\", { id: \"your_agent_id\" });\n\n// Example router\nconst helloResponse = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(helloResponse.greeting); // \"Hello world\"\nconst secretMessage = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(secretMessage); // \"you can now see this secret message!\"\n```\n\nThese components work together to provide a complete system for the agentgpt project, handling authentication, database access, and API routing in a consistent and organized manner.",
  "questions": ""
}