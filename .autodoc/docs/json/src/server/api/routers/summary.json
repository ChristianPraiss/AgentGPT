{
  "folderName": "routers",
  "folderPath": ".autodoc/docs/json/src/server/api/routers",
  "url": "/.autodoc/docs/json/src/server/api/routers",
  "files": [
    {
      "fileName": "account.ts",
      "filePath": "src/server/api/routers/account.ts",
      "url": "/src/server/api/routers/account.ts",
      "summary": "This code defines a router for handling account-related operations in the agentgpt project. The router is created using the `createTRPCRouter` function from the `trpc` module. The router has two endpoints, `subscribe` and `manage`, both of which are protected procedures that require authentication.\n\nThe `subscribe` endpoint creates a new Stripe checkout session for the user to subscribe to a plan. It first retrieves the user's information from the database using the `prisma` module. It then creates a new checkout session using the Stripe API, with the success and cancel URLs set to the `NEXTAUTH_URL` environment variable. The session is set to subscription mode and includes a single line item with the price ID set to the `STRIPE_SUBSCRIPTION_PRICE_ID` environment variable. The customer ID and email are set to the user's Stripe customer ID and email, respectively, if available. The client reference ID and metadata are also set to the user's ID.\n\nThe `manage` endpoint creates a new Stripe billing portal session for the user to manage their subscription. It first retrieves the user's subscription ID from the session. It then retrieves the subscription information from the Stripe API and creates a new billing portal session using the customer ID associated with the subscription. The return URL is set to the `NEXTAUTH_URL` environment variable.\n\nOverall, this code provides a way for users to manage their subscriptions in the agentgpt project using the Stripe API. The `accountRouter` can be used in conjunction with other routers and modules to provide a complete user account system. For example, the `prisma` module can be used to store user information in a database, and the `utils/stripe-utils` module can be used to retrieve and update Stripe customer information.",
      "questions": "1. What is the purpose of the `createTRPCRouter` function and how is it used in this code?\n- `createTRPCRouter` is a function that creates a router for handling TRPC requests. In this code, it is used to create the `accountRouter` object which has two methods: `subscribe` and `manage`.\n\n2. What is the purpose of the `Stripe` library and how is it used in this code?\n- `Stripe` is a library for interacting with the Stripe API. In this code, it is used to create a new `stripe` object with the `env.STRIPE_SECRET_KEY` key and version `2022-11-15`. It is also used to create a new checkout session and retrieve a subscription.\n\n3. What is the purpose of the `protectedProcedure` function and how is it used in this code?\n- `protectedProcedure` is a function that wraps a TRPC procedure and adds authentication and authorization checks. In this code, it is used to wrap the `subscribe` and `manage` methods of the `accountRouter` object to ensure that only authenticated users can access them."
    },
    {
      "fileName": "agentRouter.ts",
      "filePath": "src/server/api/routers/agentRouter.ts",
      "url": "/src/server/api/routers/agentRouter.ts",
      "summary": "This code defines a router for managing agents in the larger project. The `agentRouter` object has four methods: `create`, `getAll`, `findById`, and `deleteById`. \n\nThe `create` method is a protected mutation that takes an input object with `name`, `goal`, and `tasks` properties. The `name` and `goal` properties are strings, while the `tasks` property is an array of objects that conform to the `messageParser` schema. The method creates a new agent in the database using the `prisma` ORM, with the `name`, `goal`, and `userId` properties taken from the input object and the `id` property generated automatically. It then creates a new `agentTask` object in the database for each task in the `tasks` array, with the `agentId`, `type`, `info`, `value`, and `sort` properties taken from the corresponding task object in the input array. Finally, it returns the newly created agent object.\n\nThe `getAll` method is a protected query that returns an array of up to 20 agents from the database that belong to the current user and have not been deleted. The agents are sorted by `createDate` in descending order.\n\nThe `findById` method is a public query that takes an `id` string as input and returns the agent object with the corresponding `id` from the database, along with an array of associated `agentTask` objects. The `agentTask` objects are sorted by `sort` in ascending order.\n\nThe `deleteById` method is a protected mutation that takes an `id` string as input and marks the corresponding agent object in the database as deleted by setting its `deleteDate` property to the current date.\n\nOverall, this code provides a set of CRUD operations for managing agents in the larger project. It uses the `zod` library for input validation and the `prisma` ORM for database access. The `agentRouter` object can be used by other parts of the project to create, read, update, and delete agents and their associated tasks. For example, the `create` method could be used by a user interface to create a new agent with a name, goal, and list of tasks, while the `getAll` method could be used to display a list of agents belonging to the current user.",
      "questions": "1. What is the purpose of the `agentRouter` object?\n- The `agentRouter` object is a TRPC router that defines four procedures: `create`, `getAll`, `findById`, and `deleteById`, which respectively create a new agent, get all agents, get an agent by ID, and delete an agent by ID.\n\n2. What is the `saveAgentParser` object used for?\n- The `saveAgentParser` object is used to validate the input data for creating a new agent. It expects an object with `name`, `goal`, and `tasks` properties, where `name` and `goal` are strings and `tasks` is an array of objects that match the `messageParser` schema.\n\n3. What is the purpose of the `messageParser` schema?\n- The `messageParser` schema is used to validate the `tasks` property of the input data for creating a new agent. It expects an object with `type`, `info`, and `value` properties, where `type` is a string and `info` and `value` are optional strings."
    },
    {
      "fileName": "example.ts",
      "filePath": "src/server/api/routers/example.ts",
      "url": "/src/server/api/routers/example.ts",
      "summary": "The code above defines a router for the agentgpt project using the trpc library. The router is named `exampleRouter` and contains two procedures: `hello` and `getSecretMessage`.\n\nThe `hello` procedure is a public procedure that takes an input object with a single property `text` of type string. It returns an object with a single property `greeting` that concatenates the input `text` with the string \"Hello\". This procedure can be used to greet a user with a personalized message.\n\nHere is an example of how to use the `hello` procedure:\n\n```javascript\nconst response = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(response.greeting); // \"Hello world\"\n```\n\nThe `getSecretMessage` procedure is a protected procedure that does not take any input. It returns a string that can only be accessed by authenticated users. This procedure can be used to retrieve sensitive information that should not be accessible to the general public.\n\nHere is an example of how to use the `getSecretMessage` procedure:\n\n```javascript\nconst response = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(response); // \"you can now see this secret message!\"\n```\n\nOverall, this code defines a router that can be used to handle incoming requests and provide responses based on the defined procedures. The `hello` procedure can be used to greet users with personalized messages, while the `getSecretMessage` procedure can be used to retrieve sensitive information that requires authentication.",
      "questions": "1. What is the purpose of the `zod` library being imported?\n- The `zod` library is being used for input validation and type checking.\n\n2. What is the difference between `publicProcedure` and `protectedProcedure`?\n- `publicProcedure` is accessible to anyone, while `protectedProcedure` requires authentication to access.\n\n3. What is the expected output of the `hello` procedure?\n- The `hello` procedure expects an input object with a `text` property of type string, and returns an object with a `greeting` property that concatenates the input `text` with the string \"Hello\"."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/src/server/api/routers` folder contains routers for handling various operations in the agentgpt project. These routers are created using the `trpc` module and can be used in conjunction with other parts of the project to provide a complete system.\n\n### account.ts\n\nThe `account.ts` file defines a router for handling account-related operations. It has two endpoints, `subscribe` and `manage`, both of which require authentication.\n\n- `subscribe`: Creates a new Stripe checkout session for the user to subscribe to a plan. It retrieves the user's information from the database using the `prisma` module and creates a new checkout session using the Stripe API.\n- `manage`: Creates a new Stripe billing portal session for the user to manage their subscription. It retrieves the user's subscription ID from the session and creates a new billing portal session using the customer ID associated with the subscription.\n\nExample usage:\n\n```javascript\nconst subscribeResponse = await accountRouter.mutation(\"subscribe\", { planId: \"your_plan_id\" });\nconst manageResponse = await accountRouter.mutation(\"manage\", { subscriptionId: \"your_subscription_id\" });\n```\n\n### agentRouter.ts\n\nThe `agentRouter.ts` file defines a router for managing agents. It has four methods: `create`, `getAll`, `findById`, and `deleteById`.\n\n- `create`: Creates a new agent in the database with the given `name`, `goal`, and `tasks`. It also creates associated `agentTask` objects in the database.\n- `getAll`: Returns an array of up to 20 agents belonging to the current user and not deleted, sorted by `createDate` in descending order.\n- `findById`: Returns the agent object with the corresponding `id` from the database, along with an array of associated `agentTask` objects.\n- `deleteById`: Marks the corresponding agent object in the database as deleted by setting its `deleteDate` property to the current date.\n\nExample usage:\n\n```javascript\nconst createResponse = await agentRouter.mutation(\"create\", { name: \"Agent 1\", goal: \"Goal 1\", tasks: [...] });\nconst allAgents = await agentRouter.query(\"getAll\");\nconst agent = await agentRouter.query(\"findById\", { id: \"your_agent_id\" });\nconst deleteResponse = await agentRouter.mutation(\"deleteById\", { id: \"your_agent_id\" });\n```\n\n### example.ts\n\nThe `example.ts` file defines a router named `exampleRouter` with two procedures: `hello` and `getSecretMessage`.\n\n- `hello`: A public procedure that takes an input object with a single property `text` of type string and returns an object with a single property `greeting` that concatenates the input `text` with the string \"Hello\".\n- `getSecretMessage`: A protected procedure that returns a string that can only be accessed by authenticated users.\n\nExample usage:\n\n```javascript\nconst helloResponse = await exampleRouter.query(\"hello\", { text: \"world\" });\nconsole.log(helloResponse.greeting); // \"Hello world\"\n\nconst secretMessage = await exampleRouter.query(\"getSecretMessage\", null, {\n  headers: {\n    Authorization: \"Bearer <your_access_token>\",\n  },\n});\nconsole.log(secretMessage); // \"you can now see this secret message!\"\n```\n\nThese routers provide a way to handle various operations in the agentgpt project, such as managing user accounts, agents, and tasks. They can be used with other modules, like `prisma` for database access and `utils/stripe-utils` for Stripe customer management.",
  "questions": ""
}