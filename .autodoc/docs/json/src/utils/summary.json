{
  "folderName": "utils",
  "folderPath": ".autodoc/docs/json/src/utils",
  "url": "/.autodoc/docs/json/src/utils",
  "files": [
    {
      "fileName": "api.ts",
      "filePath": "src/utils/api.ts",
      "url": "/src/utils/api.ts",
      "summary": "This code is the client-side entrypoint for a tRPC API. It creates the `api` object, which contains the Next.js App-wrapper and typesafe react-query hooks. The `api` object is used to make requests to the server-side API. \n\nThe `createTRPCNext` function is used to create the `api` object. It takes an object with a `config` function and an optional `ssr` boolean. The `config` function returns an object with a `transformer` and a `links` array. The `transformer` is used for data de-serialization from the server, and the `links` array is used to determine the request flow from the client to the server. \n\nThe `httpBatchLink` is one of the links in the `links` array. It is used to batch multiple requests into a single HTTP request. The `loggerLink` is another link in the `links` array. It logs the requests and responses to the console. \n\nThe `getBaseUrl` function is used to determine the base URL for the API. If the code is running in the browser, it returns an empty string, which means the browser should use a relative URL. If the code is running on the server, it returns the URL of the server. If the code is running in development mode, it returns `http://localhost:3000`. \n\nThe `RouterInputs` and `RouterOutputs` types are inference helpers for input and output types. They are used to define the types of the inputs and outputs for the API methods. \n\nOverall, this code sets up the client-side API for the tRPC API. It creates the `api` object, which is used to make requests to the server-side API. It also sets up the `httpBatchLink` and `loggerLink` for the API requests, and defines the input and output types for the API methods.",
      "questions": "1. What is the purpose of the `api` object being created and what does it contain?\n- The `api` object is created to contain the Next.js App-wrapper and typesafe react-query hooks for the tRPC API.\n- It is used as a set of typesafe react-query hooks for the tRPC API.\n\n2. What are the `transformer` and `links` properties used for in the `config` function?\n- The `transformer` property is used for data de-serialization from the server.\n- The `links` property is used to determine request flow from client to server.\n\n3. What is the purpose of the `ssr` property and what is its default value?\n- The `ssr` property determines whether tRPC should await queries when server rendering pages.\n- Its default value is `false`."
    },
    {
      "fileName": "constants.ts",
      "filePath": "src/utils/constants.ts",
      "url": "/src/utils/constants.ts",
      "summary": "This code defines constants that are used in the agentgpt project for working with different versions of the GPT (Generative Pre-trained Transformer) language model. The GPT model is a type of artificial intelligence that can generate human-like text based on a given prompt.\n\nThe first two constants, `GPT_35_TURBO` and `GPT_4`, represent different versions of the GPT model. `GPT_35_TURBO` refers to a specific version of the GPT-3 model that has been optimized for speed, while `GPT_4` represents a hypothetical future version of the model.\n\nThe `GPT_MODEL_NAMES` constant is an array that contains the names of all the GPT models that are currently supported by the agentgpt project. This array can be used to check whether a given model name is valid or to iterate over all the supported models.\n\nThe remaining constants, `DEFAULT_MAX_LOOPS_FREE`, `DEFAULT_MAX_LOOPS_PAID`, and `DEFAULT_MAX_LOOPS_CUSTOM_API_KEY`, define the default maximum number of loops that the GPT model can run for different types of users. A loop refers to a single iteration of the GPT model generating text based on a given prompt. The `DEFAULT_MAX_LOOPS_FREE` constant is used for users who are using the GPT model for free, while `DEFAULT_MAX_LOOPS_PAID` is used for paid users. The `DEFAULT_MAX_LOOPS_CUSTOM_API_KEY` constant is used for users who have a custom API key that allows them to run the GPT model with higher limits.\n\nOverall, this code provides a way for the agentgpt project to work with different versions of the GPT model and to set default limits on how many times the model can be run for different types of users.",
      "questions": "1. What are the different GPT models available in this project?\n- The project has two GPT models: \"gpt-3.5-turbo\" and \"gpt-4\".\n\n2. What is the significance of the DEFAULT_MAX_LOOPS variables?\n- These variables define the default maximum number of loops for different types of API keys: free, paid, and custom.\n\n3. Is there any other relevant information missing from this code snippet?\n- It is unclear what the purpose of the GPT_MODEL_NAMES array is, as it is not used in this code snippet."
    },
    {
      "fileName": "helpers.ts",
      "filePath": "src/utils/helpers.ts",
      "url": "/src/utils/helpers.ts",
      "summary": "This file contains several utility functions that are used in the larger agentgpt project. \n\nThe `isArrayOfType` function checks whether an array is of a specified type. It takes in an array and a type, and returns a boolean indicating whether the array is of the specified type. This function is useful for type checking in the project.\n\nThe `extractTasks` function takes in a string and an array of completed tasks, and returns an array of tasks that have not been completed. It does this by first extracting an array of tasks from the input string using the `extractArray` function, and then filtering out tasks that have already been completed or are not real tasks using the `realTasksFilter` function. This function is likely used in the project to manage tasks.\n\nThe `extractArray` function takes in a string and extracts an array of strings from it. It does this by using a regular expression to match an outer array of strings (including nested arrays) in the input string, and then parsing the matched string to get the array. This function is useful for extracting arrays from strings in the project.\n\nThe `realTasksFilter` function takes in a string and returns a boolean indicating whether the string represents a real task. It does this by checking the string against several regular expressions that match strings that do not represent real tasks. This function is used by the `extractTasks` function to filter out non-real tasks.\n\nOverall, these utility functions are used in the agentgpt project to manage tasks and perform type checking and string manipulation. An example usage of the `extractTasks` function might look like this:\n\n```\nconst text = \"Here are some tasks: ['Task 1', 'Task 2', 'No tasks added']\";\nconst completedTasks = ['Task 1'];\nconst tasks = extractTasks(text, completedTasks);\nconsole.log(tasks); // ['Task 2']\n```",
      "questions": "1. What is the purpose of the `isArrayOfType` function?\n- The `isArrayOfType` function checks whether an array is of the specified type and returns a boolean value.\n\n2. What is the purpose of the `extractTasks` function?\n- The `extractTasks` function takes in a string and an array of completed tasks, and returns an array of tasks that are not completed and are extracted from the input string.\n\n3. What is the purpose of the `realTasksFilter` function?\n- The `realTasksFilter` function filters out tasks that are not real tasks, such as \"No tasks added\", \"Task complete\", and \"Do nothing\"."
    },
    {
      "fileName": "interfaces.ts",
      "filePath": "src/utils/interfaces.ts",
      "url": "/src/utils/interfaces.ts",
      "summary": "This code defines an interface called `RequestBody` which is used to define the structure of the request body for a specific endpoint in the `agentgpt` project. The `RequestBody` interface has several properties including `modelSettings`, `goal`, `task`, `tasks`, `lastTask`, `result`, and `completedTasks`. \n\nThe `modelSettings` property is of type `ModelSettings` which is imported from another file in the project. This property is used to specify the settings for the machine learning model that will be used to generate responses to the user's input.\n\nThe `goal` property is a required string that specifies the overall goal of the user's request. This could be something like \"book a flight\" or \"order food\".\n\nThe `task` property is an optional string that specifies a specific sub-task related to the overall goal. For example, if the goal is to book a flight, the task could be to select a departure date.\n\nThe `tasks` property is an optional array of strings that specifies multiple sub-tasks related to the overall goal. This property is used when there are multiple steps involved in achieving the overall goal.\n\nThe `lastTask` property is an optional string that specifies the last completed sub-task. This property is used to keep track of the user's progress towards achieving the overall goal.\n\nThe `result` property is an optional string that specifies the result of the user's request. For example, if the goal is to book a flight, the result could be the confirmation number of the booked flight.\n\nThe `completedTasks` property is an optional array of strings that specifies the sub-tasks that have been completed by the user.\n\nOverall, this code is used to define the structure of the request body for a specific endpoint in the `agentgpt` project. This interface is used to ensure that the request body is properly formatted and contains all the necessary information for the machine learning model to generate an appropriate response. Here is an example of how this interface could be used in a function:\n\n```\nfunction generateResponse(requestBody: RequestBody): string {\n  // Use the information in the requestBody to generate a response\n  // ...\n  return response;\n}\n```",
      "questions": "1. What is the purpose of the `RequestBody` interface?\n   - The `RequestBody` interface defines the structure of the request body that will be sent to the server. It includes properties such as `modelSettings`, `goal`, `task`, `tasks`, `lastTask`, `result`, and `completedTasks`.\n\n2. What is the `ModelSettings` type that is imported?\n   - The `ModelSettings` type is imported from a file located at `./types`. It is likely that this file contains additional type definitions that are used throughout the project.\n\n3. What is the expected data type for the `tasks` property in the `RequestBody` interface?\n   - The `tasks` property in the `RequestBody` interface is an optional array of strings. This suggests that the server may be able to handle multiple tasks at once, and that the `tasks` property is used to pass an array of task names to the server."
    },
    {
      "fileName": "parsers.ts",
      "filePath": "src/utils/parsers.ts",
      "url": "/src/utils/parsers.ts",
      "summary": "This code defines two parsers that are used by the LangChain library to prompt for a given format and parse outputs. The LangChain library is not included in this file, but it is assumed to be part of the larger project. \n\nThe first parser, `actionParser`, is used to parse structured output that contains an action and an argument. The action can be either \"Question\" or \"Respond\", and the argument is a string that provides additional information about the action. This parser is created using the `StructuredOutputParser.fromZodSchema()` method, which takes a Zod schema as an argument. Zod is a library for data validation and serialization, and in this case it is used to define the structure of the expected output. \n\nHere is an example of how `actionParser` might be used in the larger project:\n\n```javascript\nconst userInput = prompt(\"Enter your response:\");\nconst structuredOutput = actionParser.parse(userInput);\nif (structuredOutput.action === \"Respond\") {\n  // do something with the argument\n}\n```\n\nThe second parser, `tasksParser`, is used to parse structured output that contains an array of strings representing tasks to complete. This parser is also created using `StructuredOutputParser.fromZodSchema()`, but this time the schema defines an array of strings. \n\nHere is an example of how `tasksParser` might be used in the larger project:\n\n```javascript\nconst userInput = prompt(\"Enter your tasks, separated by commas:\");\nconst structuredOutput = tasksParser.parse(userInput);\nstructuredOutput.forEach(task => {\n  // do something with each task\n});\n```\n\nOverall, this code provides a way to define and use parsers for structured output in the LangChain library. These parsers can be used to validate and parse user input, and to provide a consistent format for output from the larger project.",
      "questions": "1. What is the purpose of the `StructuredOutputParser` class?\n- The `StructuredOutputParser` class is used by LangChain to prompt for a given format and parse outputs.\n\n2. What is the difference between `actionParser` and `tasksParser`?\n- `actionParser` is used to parse an object with an `action` string and an `arg` string, while `tasksParser` is used to parse an array of strings representing a list of tasks.\n\n3. What is the significance of the `respondAction` constant?\n- The `respondAction` constant is used to specify the value of the `action` key in the `actionParser` schema, indicating that the action to take is to respond to a prompt."
    },
    {
      "fileName": "prompts.ts",
      "filePath": "src/utils/prompts.ts",
      "url": "/src/utils/prompts.ts",
      "summary": "This code defines several constants and functions that are used in the AgentGPT project. The project is an AI system that can create and execute tasks to help achieve a given goal. \n\nThe `createModel` function creates a new instance of the `OpenAI` class from the `langchain/llms/openai` module. It takes a `settings` object as an argument, which contains the API key to use, the temperature for generating responses, the name of the model to use, and the maximum number of tokens to generate. The function returns the new `OpenAI` instance.\n\nThe `startGoalPrompt`, `executeTaskPrompt`, and `createTasksPrompt` constants are instances of the `PromptTemplate` class from the `langchain/prompts` module. Each constant defines a different prompt template that can be used to generate prompts for the AgentGPT system. The `startGoalPrompt` is used to prompt the system to create a list of tasks to achieve a given goal. The `executeTaskPrompt` is used to prompt the system to execute a specific task to achieve a given goal. The `createTasksPrompt` is used to prompt the system to create a new task based on the results of previous tasks.\n\nThese prompt templates contain placeholders for variables such as the goal, tasks, last task, and result. These variables are replaced with actual values when the prompts are generated. The prompts are generated using the `generatePrompt` method of the `PromptTemplate` class.\n\nOverall, this code provides the necessary functionality for generating prompts and creating an instance of the OpenAI class for the AgentGPT project. It can be used in conjunction with other modules and classes to build a complete AI system for task creation and execution.",
      "questions": "1. What is the purpose of the `OpenAI` import and how is it used in this code?\n   - The `OpenAI` import is used to create a new instance of the OpenAI API with the specified settings in the `createModel` function.\n2. What is the significance of the `GPT_35_TURBO` constant and how is it used in this code?\n   - The `GPT_35_TURBO` constant is used as the default model name in the `createModel` function if a custom model name is not provided in the `settings` parameter.\n3. What is the purpose of the `PromptTemplate` class and how is it used in this code?\n   - The `PromptTemplate` class is used to create reusable prompt templates for generating prompts with dynamic input variables. It is used to create the `startGoalPrompt`, `executeTaskPrompt`, and `createTasksPrompt` prompts in this code."
    },
    {
      "fileName": "stripe-utils.ts",
      "filePath": "src/utils/stripe-utils.ts",
      "url": "/src/utils/stripe-utils.ts",
      "summary": "This code defines two functions that are used to retrieve customer information from the Stripe API. The `getCustomerId` function takes a customer object as an argument and returns the customer ID. The function checks the type of the customer object and returns the ID if it is a string or an object with an `id` property. If the customer object is null or an unexpected type, an error is thrown.\n\nThe `getCustomerEmail` function takes a Stripe object and a customer object as arguments and returns the customer's email address. If the customer object is a string, the function retrieves the customer object from the Stripe API using the `retrieve` method and assigns it to a variable `c`. If the customer object is not a string, the function assigns it directly to `c`. The function then returns the email address of the customer object, or an empty string if the email address is not defined.\n\nThese functions are likely used in the larger project to retrieve customer information from the Stripe API. The `getCustomerId` function may be used to retrieve the customer ID for a given customer, which can be used to perform other operations on the customer's account. The `getCustomerEmail` function may be used to retrieve the email address of a customer, which can be used to send email notifications or other communications to the customer.\n\nExample usage of `getCustomerId`:\n\n```\nimport { getCustomerId } from \"agentgpt\";\n\nconst customer = { id: \"cus_1234567890\" };\nconst customerId = getCustomerId(customer);\nconsole.log(customerId); // \"cus_1234567890\"\n```\n\nExample usage of `getCustomerEmail`:\n\n```\nimport Stripe from \"stripe\";\nimport { getCustomerEmail } from \"agentgpt\";\n\nconst stripe = new Stripe(\"sk_test_1234567890\", {\n  apiVersion: \"2020-08-27\",\n});\n\nconst customerId = \"cus_1234567890\";\nconst customerEmail = await getCustomerEmail(stripe, customerId);\nconsole.log(customerEmail); // \"example@example.com\"\n```",
      "questions": "1. What is the purpose of this code?\n   This code defines two functions for retrieving customer information from Stripe, specifically their ID and email address.\n\n2. What input types are accepted by the `getCustomerId` and `getCustomerEmail` functions?\n   Both functions accept a string representing a customer ID, a `Stripe.Customer` object, a `Stripe.DeletedCustomer` object, or `null`.\n\n3. What happens if the `customer` parameter is `null` or an unexpected type?\n   If `customer` is `null`, both functions will throw an error with the message \"No customer found\". If `customer` is an unexpected type, `getCustomerId` will throw an error with the message \"Unexpected customer type\", while `getCustomerEmail` will throw a runtime error due to the `await` keyword being used on a non-promise value."
    },
    {
      "fileName": "types.ts",
      "filePath": "src/utils/types.ts",
      "url": "/src/utils/types.ts",
      "summary": "This code defines a TypeScript type called `ModelSettings`. This type is used to define the settings for a machine learning model that will be used in the larger `agentgpt` project. The `ModelSettings` type has four properties: `customApiKey`, `customModelName`, `customTemperature`, and `customMaxLoops`. \n\nThe `customApiKey` property is a string that represents the API key that will be used to access the machine learning model. The `customModelName` property is a string that represents the name of the machine learning model that will be used. The `customTemperature` property is a number that represents the \"temperature\" of the machine learning model. This temperature setting controls the randomness of the model's output. The `customMaxLoops` property is a number that represents the maximum number of loops that the machine learning model will run before stopping.\n\nThis `ModelSettings` type is likely used throughout the `agentgpt` project to configure and customize the machine learning model. For example, the `ModelSettings` type might be used to create an instance of the machine learning model with specific settings:\n\n```\nconst settings: ModelSettings = {\n  customApiKey: 'my-api-key',\n  customModelName: 'my-model',\n  customTemperature: 0.5,\n  customMaxLoops: 10,\n};\n\nconst model = new MachineLearningModel(settings);\n```\n\nIn this example, a new instance of the `MachineLearningModel` class is created with the `settings` object passed as an argument. The `MachineLearningModel` class likely uses the `ModelSettings` type to configure the machine learning model with the specified settings. \n\nOverall, this code is an important part of the `agentgpt` project as it defines the settings for the machine learning model that is used throughout the project.",
      "questions": "1. What is the purpose of this code and how is it used within the agentgpt project?\n- This code exports a type called `ModelSettings` which likely contains settings for a custom GPT model used within the agentgpt project.\n\n2. What are the valid values for each property within the `ModelSettings` type?\n- The `customApiKey` property should be a string, `customModelName` should be a string, `customTemperature` should be a number, and `customMaxLoops` should be a number.\n\n3. How does the `ModelSettings` type relate to other parts of the agentgpt project?\n- Without more context, it is unclear how the `ModelSettings` type is used within the project or how it relates to other parts of the codebase."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/src/utils` folder contains utility functions, constants, and types that are used throughout the `agentgpt` project. These utilities are essential for setting up the client-side API, working with different versions of the GPT model, managing tasks, and interacting with the Stripe API.\n\nFor example, `api.ts` sets up the client-side API for the tRPC API, creating the `api` object used to make requests to the server-side API. It also sets up the `httpBatchLink` and `loggerLink` for the API requests and defines the input and output types for the API methods.\n\n`constants.ts` defines constants related to different versions of the GPT model and default limits on how many times the model can be run for different types of users. This allows the project to work with different GPT models and set default limits for users.\n\n`helpers.ts` contains utility functions for managing tasks and performing type checking and string manipulation. For example, the `extractTasks` function can be used to manage tasks like this:\n\n```javascript\nconst text = \"Here are some tasks: ['Task 1', 'Task 2', 'No tasks added']\";\nconst completedTasks = ['Task 1'];\nconst tasks = extractTasks(text, completedTasks);\nconsole.log(tasks); // ['Task 2']\n```\n\n`interfaces.ts` defines the `RequestBody` interface, which is used to ensure that the request body for a specific endpoint in the project is properly formatted and contains all the necessary information for the machine learning model to generate an appropriate response.\n\n`parsers.ts` defines parsers for structured output in the LangChain library, which can be used to validate and parse user input and provide a consistent format for output from the project.\n\n`prompts.ts` provides functionality for generating prompts and creating an instance of the OpenAI class for the AgentGPT project. It can be used in conjunction with other modules and classes to build a complete AI system for task creation and execution.\n\n`stripe-utils.ts` defines functions for retrieving customer information from the Stripe API, such as `getCustomerId` and `getCustomerEmail`. These functions can be used to interact with the Stripe API and manage customer information.\n\n`types.ts` defines the `ModelSettings` type, which is used to configure and customize the machine learning model used throughout the project.\n\nOverall, the code in this folder provides essential utilities and configurations for the `agentgpt` project, enabling it to work with different GPT models, manage tasks, interact with the Stripe API, and more.",
  "questions": ""
}